// resources/js/calendar-context-menu.js
function calendarContextMenu({
  getActionsUsing
}) {
  return {
    open: false,
    size: {
      width: 0,
      height: 0
    },
    position: {
      x: 0,
      y: 0
    },
    mountData: {},
    context: null,
    actions: [],
    isLoading: false,
    menu: {
      ["x-show"]() {
        return this.open;
      },
      ["x-bind:style"]() {
        return `
                position: absolute;
                z-index: 40;
                top: ${this.position.y}px;
                left: ${this.position.x}px;
                `;
      },
      ["x-on:click.away"]() {
        this.closeMenu();
      }
    },
    init: async function() {
      const menu = this.$el.querySelector('[x-bind="menu"]');
      this.size = {
        width: menu.offsetWidth,
        height: menu.offsetHeight
      };
      this.$el.addEventListener("calendar--open-menu", (event) => this.openMenu(event));
    },
    loadActions: async function(context, data = {}) {
      this.isLoading = true;
      this.actions = [];
      getActionsUsing(context, data).then((actions) => {
        this.actions = actions;
      }).finally(() => this.isLoading = false);
    },
    openMenu: async function(event) {
      this.$nextTick(() => {
        const clientX = event.clientX;
        const clientY = event.clientY;
        const pageX = event.pageX;
        const pageY = event.pageY;
        const offsetX = clientX + this.size.width > window.innerWidth ? clientX + this.size.width - window.innerWidth : 0;
        const offsetY = clientY + this.size.height > window.innerHeight ? clientY + this.size.height - window.innerHeight : 0;
        this.position.x = pageX - offsetX;
        this.position.y = pageY - offsetY;
        this.open = true;
      });
    },
    closeMenu: function() {
      this.open = false;
    }
  };
}
export {
  calendarContextMenu as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NhbGVuZGFyLWNvbnRleHQtbWVudS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FsZW5kYXJDb250ZXh0TWVudSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRBY3Rpb25zVXNpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICByZXR1cm4ge1xuXG4gICAgICAgIG9wZW46IGZhbHNlLFxuXG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50RGF0YToge30sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGFjdGlvbnM6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuXG4gICAgICAgIG1lbnU6IHtcbiAgICAgICAgICAgIFsneC1zaG93J10oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3BlblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFsneC1iaW5kOnN0eWxlJ10oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgei1pbmRleDogNDA7XG4gICAgICAgICAgICAgICAgdG9wOiAke3RoaXMucG9zaXRpb24ueX1weDtcbiAgICAgICAgICAgICAgICBsZWZ0OiAke3RoaXMucG9zaXRpb24ueH1weDtcbiAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFsneC1vbjpjbGljay5hd2F5J10oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZU1lbnUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpbml0OiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBtZW51ID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvcignW3gtYmluZD1cIm1lbnVcIl0nKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogbWVudS5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IG1lbnUub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy4kZWwuYWRkRXZlbnRMaXN0ZW5lcignY2FsZW5kYXItLW9wZW4tbWVudScsIChldmVudCkgPT4gdGhpcy5vcGVuTWVudShldmVudCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvYWRBY3Rpb25zOiBhc3luYyBmdW5jdGlvbihjb250ZXh0LCBkYXRhID0ge30pIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZVxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gW11cbiAgICAgICAgICAgIGdldEFjdGlvbnNVc2luZyhjb250ZXh0LCBkYXRhKVxuICAgICAgICAgICAgICAgIC50aGVuKChhY3Rpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHRoaXMuaXNMb2FkaW5nID0gZmFsc2UpXG4gICAgICAgIH0sXG5cbiAgICAgICAgb3Blbk1lbnU6IGFzeW5jIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgLy8gdGhpcy5jb250ZXh0ID0gZXZlbnQuZGV0YWlsLmNvbnRleHQ7XG4gICAgICAgICAgICAvLyB0aGlzLm1vdW50RGF0YSA9IGV2ZW50LmRldGFpbC5tb3VudERhdGE7XG4gICAgICAgICAgICAvLyB0aGlzLmlzTG9hZGluZyA9IHRydWVcbiAgICAgICAgICAgIC8vIGdldEFjdGlvbnNVc2luZyhldmVudC5kZXRhaWwpXG4gICAgICAgICAgICAvLyAgICAgLnRoZW4oKGFjdGlvbnMpID0+IHtcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1xuICAgICAgICAgICAgLy8gICAgIH0pXG4gICAgICAgICAgICAvLyAgICAgLmZpbmFsbHkoKCkgPT4gdGhpcy5pc0xvYWRpbmcgPSBmYWxzZSlcblxuICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFggPSBldmVudC5jbGllbnRYO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudFkgPSBldmVudC5jbGllbnRZO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VYID0gZXZlbnQucGFnZVg7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZVkgPSBldmVudC5wYWdlWTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSBjbGllbnRYICsgdGhpcy5zaXplLndpZHRoID4gd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgPyBjbGllbnRYICsgdGhpcy5zaXplLndpZHRoIC0gd2luZG93LmlubmVyV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSBjbGllbnRZICsgdGhpcy5zaXplLmhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICAgICAgICAgICAgICA/IGNsaWVudFkgKyB0aGlzLnNpemUuaGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIDogMDtcblxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHBhZ2VYIC0gb2Zmc2V0WDtcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSBwYWdlWSAtIG9mZnNldFk7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsb3NlTWVudTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAvLyB0aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLG9CQUFxQztBQUFBLEVBQ0k7QUFDSixHQUFHO0FBQzNDLFNBQU87QUFBQSxJQUVILE1BQU07QUFBQSxJQUVOLE1BQU07QUFBQSxNQUNGLE9BQU87QUFBQSxNQUNQLFFBQVE7QUFBQSxJQUNaO0FBQUEsSUFDQSxVQUFVO0FBQUEsTUFDTixHQUFHO0FBQUEsTUFDSCxHQUFHO0FBQUEsSUFDUDtBQUFBLElBQ0EsV0FBVyxDQUFDO0FBQUEsSUFDWixTQUFTO0FBQUEsSUFDVCxTQUFTLENBQUM7QUFBQSxJQUNWLFdBQVc7QUFBQSxJQUVYLE1BQU07QUFBQSxNQUNGLENBQUMsUUFBUSxJQUFJO0FBQ1QsZUFBTyxLQUFLO0FBQUEsTUFDaEI7QUFBQSxNQUNBLENBQUMsY0FBYyxJQUFJO0FBQ2YsZUFBTztBQUFBO0FBQUE7QUFBQSx1QkFHQSxLQUFLLFNBQVMsQ0FBQztBQUFBLHdCQUNkLEtBQUssU0FBUyxDQUFDO0FBQUE7QUFBQSxNQUUzQjtBQUFBLE1BQ0EsQ0FBQyxpQkFBaUIsSUFBSTtBQUNsQixhQUFLLFVBQVU7QUFBQSxNQUNuQjtBQUFBLElBQ0o7QUFBQSxJQUVBLE1BQU0saUJBQWtCO0FBQ3BCLFlBQU0sT0FBTyxLQUFLLElBQUksY0FBYyxpQkFBaUI7QUFDckQsV0FBSyxPQUFPO0FBQUEsUUFDUixPQUFPLEtBQUs7QUFBQSxRQUNaLFFBQVEsS0FBSztBQUFBLE1BQ2pCO0FBRUEsV0FBSyxJQUFJLGlCQUFpQix1QkFBdUIsQ0FBQyxVQUFVLEtBQUssU0FBUyxLQUFLLENBQUM7QUFBQSxJQUNwRjtBQUFBLElBRUEsYUFBYSxlQUFlLFNBQVMsT0FBTyxDQUFDLEdBQUc7QUFDNUMsV0FBSyxZQUFZO0FBQ2pCLFdBQUssVUFBVSxDQUFDO0FBQ2hCLHNCQUFnQixTQUFTLElBQUksRUFDeEIsS0FBSyxDQUFDLFlBQVk7QUFDZixhQUFLLFVBQVU7QUFBQSxNQUNuQixDQUFDLEVBQ0EsUUFBUSxNQUFNLEtBQUssWUFBWSxLQUFLO0FBQUEsSUFDN0M7QUFBQSxJQUVBLFVBQVUsZUFBZ0IsT0FBTztBQVU3QixXQUFLLFVBQVUsTUFBTTtBQUNqQixjQUFNLFVBQVUsTUFBTTtBQUN0QixjQUFNLFVBQVUsTUFBTTtBQUN0QixjQUFNLFFBQVEsTUFBTTtBQUNwQixjQUFNLFFBQVEsTUFBTTtBQUVwQixjQUFNLFVBQVUsVUFBVSxLQUFLLEtBQUssUUFBUSxPQUFPLGFBQzdDLFVBQVUsS0FBSyxLQUFLLFFBQVEsT0FBTyxhQUNuQztBQUNOLGNBQU0sVUFBVSxVQUFVLEtBQUssS0FBSyxTQUFTLE9BQU8sY0FDOUMsVUFBVSxLQUFLLEtBQUssU0FBUyxPQUFPLGNBQ3BDO0FBRU4sYUFBSyxTQUFTLElBQUksUUFBUTtBQUMxQixhQUFLLFNBQVMsSUFBSSxRQUFRO0FBQzFCLGFBQUssT0FBTztBQUFBLE1BQ2hCLENBQUM7QUFBQSxJQUNMO0FBQUEsSUFFQSxXQUFXLFdBQVk7QUFDbkIsV0FBSyxPQUFPO0FBQUEsSUFFaEI7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
