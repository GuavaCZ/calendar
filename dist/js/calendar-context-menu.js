// resources/js/calendar-context-menu.js
function calendarContextMenu({
  getContextMenuActionsUsing
}) {
  return {
    open: false,
    size: {
      width: 0,
      height: 0
    },
    position: {
      x: 0,
      y: 0
    },
    mountData: {},
    context: null,
    actions: [],
    isLoading: false,
    onCloseCallback: null,
    menu: {
      ["x-show"]() {
        return this.open;
      },
      ["x-bind:style"]() {
        return `
                    position: absolute;
                    z-index: 40;
                    top: ${this.position.y}px;
                    left: ${this.position.x}px;
                `;
      },
      ["x-on:click.away"]() {
        this.closeMenu();
      }
    },
    init: async function() {
      const menu = this.$el.querySelector('[x-bind="menu"]');
      this.size = {
        width: menu.offsetWidth,
        height: menu.offsetHeight
      };
      this.$el.addEventListener("calendar--open-menu", (event) => this.openMenu(event));
    },
    loadActions: async function(context, data = {}) {
      this.isLoading = true;
      this.actions = [];
      getContextMenuActionsUsing(context, data).then((actions) => {
        this.actions = actions;
      }).finally(() => this.isLoading = false);
    },
    openMenu: async function(event, eventElement = null) {
      this.$nextTick(() => {
        const clientX = event.clientX;
        const clientY = event.clientY;
        const pageX = event.pageX;
        const pageY = event.pageY;
        const offsetX = clientX + this.size.width > window.innerWidth ? clientX + this.size.width - window.innerWidth : 0;
        const offsetY = clientY + this.size.height > window.innerHeight ? clientY + this.size.height - window.innerHeight : 0;
        this.position.x = pageX - offsetX;
        this.position.y = pageY - offsetY;
        this.open = true;
        if (eventElement) {
          eventElement.classList.add("gu-context-menu-open");
        }
      });
    },
    closeMenu: function() {
      this.open = false;
      document.querySelectorAll(".ec-event").forEach(
        (event) => event.classList.remove("gu-context-menu-open")
      );
      if (this.onCloseCallback) {
        this.onCloseCallback();
      }
    }
  };
}
export {
  calendarContextMenu as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NhbGVuZGFyLWNvbnRleHQtbWVudS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FsZW5kYXJDb250ZXh0TWVudSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRDb250ZXh0TWVudUFjdGlvbnNVc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG9wZW46IGZhbHNlLFxuXG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50RGF0YToge30sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGFjdGlvbnM6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBvbkNsb3NlQ2FsbGJhY2s6IG51bGwsXG5cbiAgICAgICAgbWVudToge1xuICAgICAgICAgICAgWyd4LXNob3cnXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcGVuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgWyd4LWJpbmQ6c3R5bGUnXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDQwO1xuICAgICAgICAgICAgICAgICAgICB0b3A6ICR7dGhpcy5wb3NpdGlvbi55fXB4O1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAke3RoaXMucG9zaXRpb24ueH1weDtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgWyd4LW9uOmNsaWNrLmF3YXknXSgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTWVudSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgbWVudSA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJ1t4LWJpbmQ9XCJtZW51XCJdJylcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogbWVudS5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IG1lbnUub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKCdjYWxlbmRhci0tb3Blbi1tZW51JywgKGV2ZW50KSA9PiB0aGlzLm9wZW5NZW51KGV2ZW50KSlcbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkQWN0aW9uczogYXN5bmMgZnVuY3Rpb24gKGNvbnRleHQsIGRhdGEgPSB7fSkge1xuICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBbXVxuICAgICAgICAgICAgZ2V0Q29udGV4dE1lbnVBY3Rpb25zVXNpbmcoY29udGV4dCwgZGF0YSlcbiAgICAgICAgICAgICAgICAudGhlbigoYWN0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZmluYWxseSgoKSA9PiB0aGlzLmlzTG9hZGluZyA9IGZhbHNlKVxuICAgICAgICB9LFxuXG4gICAgICAgIG9wZW5NZW51OiBhc3luYyBmdW5jdGlvbiAoZXZlbnQsIGV2ZW50RWxlbWVudCA9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRZID0gZXZlbnQuY2xpZW50WTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlWCA9IGV2ZW50LnBhZ2VYO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VZID0gZXZlbnQucGFnZVk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gY2xpZW50WCArIHRoaXMuc2l6ZS53aWR0aCA+IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgICAgICAgICAgICAgICAgID8gY2xpZW50WCArIHRoaXMuc2l6ZS53aWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gY2xpZW50WSArIHRoaXMuc2l6ZS5oZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgPyBjbGllbnRZICsgdGhpcy5zaXplLmhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICAgICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnggPSBwYWdlWCAtIG9mZnNldFg7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gcGFnZVkgLSBvZmZzZXRZO1xuICAgICAgICAgICAgICAgIHRoaXMub3BlbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdndS1jb250ZXh0LW1lbnUtb3BlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsb3NlTWVudTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5lYy1ldmVudCcpLmZvckVhY2goXG4gICAgICAgICAgICAgICAgZXZlbnQgPT4gZXZlbnQuY2xhc3NMaXN0LnJlbW92ZSgnZ3UtY29udGV4dC1tZW51LW9wZW4nKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgaWYgKHRoaXMub25DbG9zZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsb3NlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBZSxTQUFSLG9CQUFxQztBQUFBLEVBQ0k7QUFDSixHQUFHO0FBQzNDLFNBQU87QUFBQSxJQUNILE1BQU07QUFBQSxJQUVOLE1BQU07QUFBQSxNQUNGLE9BQU87QUFBQSxNQUNQLFFBQVE7QUFBQSxJQUNaO0FBQUEsSUFDQSxVQUFVO0FBQUEsTUFDTixHQUFHO0FBQUEsTUFDSCxHQUFHO0FBQUEsSUFDUDtBQUFBLElBQ0EsV0FBVyxDQUFDO0FBQUEsSUFDWixTQUFTO0FBQUEsSUFDVCxTQUFTLENBQUM7QUFBQSxJQUNWLFdBQVc7QUFBQSxJQUNYLGlCQUFpQjtBQUFBLElBRWpCLE1BQU07QUFBQSxNQUNGLENBQUMsUUFBUSxJQUFJO0FBQ1QsZUFBTyxLQUFLO0FBQUEsTUFDaEI7QUFBQSxNQUNBLENBQUMsY0FBYyxJQUFJO0FBQ2YsZUFBTztBQUFBO0FBQUE7QUFBQSwyQkFHSSxLQUFLLFNBQVMsQ0FBQztBQUFBLDRCQUNkLEtBQUssU0FBUyxDQUFDO0FBQUE7QUFBQSxNQUUvQjtBQUFBLE1BQ0EsQ0FBQyxpQkFBaUIsSUFBSTtBQUNsQixhQUFLLFVBQVU7QUFBQSxNQUNuQjtBQUFBLElBQ0o7QUFBQSxJQUVBLE1BQU0saUJBQWtCO0FBQ3BCLFlBQU0sT0FBTyxLQUFLLElBQUksY0FBYyxpQkFBaUI7QUFDckQsV0FBSyxPQUFPO0FBQUEsUUFDUixPQUFPLEtBQUs7QUFBQSxRQUNaLFFBQVEsS0FBSztBQUFBLE1BQ2pCO0FBRUEsV0FBSyxJQUFJLGlCQUFpQix1QkFBdUIsQ0FBQyxVQUFVLEtBQUssU0FBUyxLQUFLLENBQUM7QUFBQSxJQUNwRjtBQUFBLElBRUEsYUFBYSxlQUFnQixTQUFTLE9BQU8sQ0FBQyxHQUFHO0FBQzdDLFdBQUssWUFBWTtBQUNqQixXQUFLLFVBQVUsQ0FBQztBQUNoQixpQ0FBMkIsU0FBUyxJQUFJLEVBQ25DLEtBQUssQ0FBQyxZQUFZO0FBQ2YsYUFBSyxVQUFVO0FBQUEsTUFDbkIsQ0FBQyxFQUNBLFFBQVEsTUFBTSxLQUFLLFlBQVksS0FBSztBQUFBLElBQzdDO0FBQUEsSUFFQSxVQUFVLGVBQWdCLE9BQU8sZUFBZSxNQUFNO0FBQ2xELFdBQUssVUFBVSxNQUFNO0FBQ2pCLGNBQU0sVUFBVSxNQUFNO0FBQ3RCLGNBQU0sVUFBVSxNQUFNO0FBQ3RCLGNBQU0sUUFBUSxNQUFNO0FBQ3BCLGNBQU0sUUFBUSxNQUFNO0FBRXBCLGNBQU0sVUFBVSxVQUFVLEtBQUssS0FBSyxRQUFRLE9BQU8sYUFDN0MsVUFBVSxLQUFLLEtBQUssUUFBUSxPQUFPLGFBQ25DO0FBQ04sY0FBTSxVQUFVLFVBQVUsS0FBSyxLQUFLLFNBQVMsT0FBTyxjQUM5QyxVQUFVLEtBQUssS0FBSyxTQUFTLE9BQU8sY0FDcEM7QUFFTixhQUFLLFNBQVMsSUFBSSxRQUFRO0FBQzFCLGFBQUssU0FBUyxJQUFJLFFBQVE7QUFDMUIsYUFBSyxPQUFPO0FBRVosWUFBSSxjQUFjO0FBQ2QsdUJBQWEsVUFBVSxJQUFJLHNCQUFzQjtBQUFBLFFBQ3JEO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTDtBQUFBLElBRUEsV0FBVyxXQUFZO0FBQ25CLFdBQUssT0FBTztBQUVaLGVBQVMsaUJBQWlCLFdBQVcsRUFBRTtBQUFBLFFBQ25DLFdBQVMsTUFBTSxVQUFVLE9BQU8sc0JBQXNCO0FBQUEsTUFDMUQ7QUFDQSxVQUFJLEtBQUssaUJBQWlCO0FBQ3RCLGFBQUssZ0JBQWdCO0FBQUEsTUFDekI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
