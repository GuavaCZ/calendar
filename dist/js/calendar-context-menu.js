// resources/js/calendar-context-menu.js
function calendarContextMenu({
  getContextMenuActionsUsing
}) {
  return {
    open: false,
    size: {
      width: 0,
      height: 0
    },
    position: {
      x: 0,
      y: 0
    },
    mountData: {},
    context: null,
    actions: [],
    isLoading: false,
    onCloseCallback: null,
    menu: {
      ["x-show"]() {
        return this.open;
      },
      ["x-bind:style"]() {
        return `
                    position: absolute;
                    z-index: 40;
                    top: ${this.position.y}px;
                    left: ${this.position.x}px;
                `;
      },
      ["x-on:click.away"]() {
        this.closeMenu();
      }
    },
    init: async function() {
      const menu = this.$el.querySelector('[x-bind="menu"]');
      this.size = {
        width: menu.offsetWidth,
        height: menu.offsetHeight
      };
      this.$el.addEventListener("calendar--open-menu", (event) => this.openMenu(event));
    },
    loadActions: async function(context, data = {}) {
      this.isLoading = true;
      this.actions = [];
      getContextMenuActionsUsing(context, data).then((actions) => {
        this.actions = actions;
      }).finally(() => this.isLoading = false);
    },
    openMenu: async function(event, eventElement = null) {
      this.$nextTick(() => {
        const clientX = event.clientX;
        const clientY = event.clientY;
        const pageX = event.pageX;
        const pageY = event.pageY;
        const offsetX = clientX + this.size.width > window.innerWidth ? clientX + this.size.width - window.innerWidth : 0;
        const offsetY = clientY + this.size.height > window.innerHeight ? clientY + this.size.height - window.innerHeight : 0;
        this.position.x = pageX - offsetX;
        this.position.y = pageY - offsetY;
        this.open = true;
        if (eventElement) {
          const eventId = eventElement.getAttribute("data-event-id");
          document.querySelectorAll(`.ec-event[data-event-id="${eventId}"]`).forEach(
            (el) => el.classList.add("gu-context-menu-open")
          );
        }
      });
    },
    closeMenu: function() {
      this.open = false;
      document.querySelectorAll(".ec-event.gu-context-menu-open").forEach(
        (event) => event.classList.remove("gu-context-menu-open")
      );
      if (this.onCloseCallback) {
        this.onCloseCallback();
      }
    }
  };
}
export {
  calendarContextMenu as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NhbGVuZGFyLWNvbnRleHQtbWVudS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FsZW5kYXJDb250ZXh0TWVudSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRDb250ZXh0TWVudUFjdGlvbnNVc2luZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG9wZW46IGZhbHNlLFxuXG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50RGF0YToge30sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGFjdGlvbnM6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICBvbkNsb3NlQ2FsbGJhY2s6IG51bGwsXG5cbiAgICAgICAgbWVudToge1xuICAgICAgICAgICAgWyd4LXNob3cnXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcGVuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgWyd4LWJpbmQ6c3R5bGUnXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgIHotaW5kZXg6IDQwO1xuICAgICAgICAgICAgICAgICAgICB0b3A6ICR7dGhpcy5wb3NpdGlvbi55fXB4O1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAke3RoaXMucG9zaXRpb24ueH1weDtcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgWyd4LW9uOmNsaWNrLmF3YXknXSgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlTWVudSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgbWVudSA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJ1t4LWJpbmQ9XCJtZW51XCJdJylcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogbWVudS5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IG1lbnUub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLiRlbC5hZGRFdmVudExpc3RlbmVyKCdjYWxlbmRhci0tb3Blbi1tZW51JywgKGV2ZW50KSA9PiB0aGlzLm9wZW5NZW51KGV2ZW50KSlcbiAgICAgICAgfSxcblxuICAgICAgICBsb2FkQWN0aW9uczogYXN5bmMgZnVuY3Rpb24gKGNvbnRleHQsIGRhdGEgPSB7fSkge1xuICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBbXVxuICAgICAgICAgICAgZ2V0Q29udGV4dE1lbnVBY3Rpb25zVXNpbmcoY29udGV4dCwgZGF0YSlcbiAgICAgICAgICAgICAgICAudGhlbigoYWN0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZmluYWxseSgoKSA9PiB0aGlzLmlzTG9hZGluZyA9IGZhbHNlKVxuICAgICAgICB9LFxuXG4gICAgICAgIG9wZW5NZW51OiBhc3luYyBmdW5jdGlvbiAoZXZlbnQsIGV2ZW50RWxlbWVudCA9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRZID0gZXZlbnQuY2xpZW50WTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlWCA9IGV2ZW50LnBhZ2VYO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VZID0gZXZlbnQucGFnZVk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gY2xpZW50WCArIHRoaXMuc2l6ZS53aWR0aCA+IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgICAgICAgICAgICAgICAgID8gY2xpZW50WCArIHRoaXMuc2l6ZS53aWR0aCAtIHdpbmRvdy5pbm5lcldpZHRoXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gY2xpZW50WSArIHRoaXMuc2l6ZS5oZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgPyBjbGllbnRZICsgdGhpcy5zaXplLmhlaWdodCAtIHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICAgICAgICAgICAgICA6IDA7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnggPSBwYWdlWCAtIG9mZnNldFg7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gcGFnZVkgLSBvZmZzZXRZO1xuICAgICAgICAgICAgICAgIHRoaXMub3BlbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50SWQgPSBldmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWV2ZW50LWlkJylcblxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAuZWMtZXZlbnRbZGF0YS1ldmVudC1pZD1cIiR7ZXZlbnRJZH1cIl1gKS5mb3JFYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPT4gZWwuY2xhc3NMaXN0LmFkZCgnZ3UtY29udGV4dC1tZW51LW9wZW4nKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xvc2VNZW51OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVjLWV2ZW50Lmd1LWNvbnRleHQtbWVudS1vcGVuJykuZm9yRWFjaChcbiAgICAgICAgICAgICAgICBldmVudCA9PiBldmVudC5jbGFzc0xpc3QucmVtb3ZlKCdndS1jb250ZXh0LW1lbnUtb3BlbicpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBpZiAodGhpcy5vbkNsb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2VDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFlLFNBQVIsb0JBQXFDO0FBQUEsRUFDSTtBQUNKLEdBQUc7QUFDM0MsU0FBTztBQUFBLElBQ0gsTUFBTTtBQUFBLElBRU4sTUFBTTtBQUFBLE1BQ0YsT0FBTztBQUFBLE1BQ1AsUUFBUTtBQUFBLElBQ1o7QUFBQSxJQUNBLFVBQVU7QUFBQSxNQUNOLEdBQUc7QUFBQSxNQUNILEdBQUc7QUFBQSxJQUNQO0FBQUEsSUFDQSxXQUFXLENBQUM7QUFBQSxJQUNaLFNBQVM7QUFBQSxJQUNULFNBQVMsQ0FBQztBQUFBLElBQ1YsV0FBVztBQUFBLElBQ1gsaUJBQWlCO0FBQUEsSUFFakIsTUFBTTtBQUFBLE1BQ0YsQ0FBQyxRQUFRLElBQUk7QUFDVCxlQUFPLEtBQUs7QUFBQSxNQUNoQjtBQUFBLE1BQ0EsQ0FBQyxjQUFjLElBQUk7QUFDZixlQUFPO0FBQUE7QUFBQTtBQUFBLDJCQUdJLEtBQUssU0FBUyxDQUFDO0FBQUEsNEJBQ2QsS0FBSyxTQUFTLENBQUM7QUFBQTtBQUFBLE1BRS9CO0FBQUEsTUFDQSxDQUFDLGlCQUFpQixJQUFJO0FBQ2xCLGFBQUssVUFBVTtBQUFBLE1BQ25CO0FBQUEsSUFDSjtBQUFBLElBRUEsTUFBTSxpQkFBa0I7QUFDcEIsWUFBTSxPQUFPLEtBQUssSUFBSSxjQUFjLGlCQUFpQjtBQUNyRCxXQUFLLE9BQU87QUFBQSxRQUNSLE9BQU8sS0FBSztBQUFBLFFBQ1osUUFBUSxLQUFLO0FBQUEsTUFDakI7QUFFQSxXQUFLLElBQUksaUJBQWlCLHVCQUF1QixDQUFDLFVBQVUsS0FBSyxTQUFTLEtBQUssQ0FBQztBQUFBLElBQ3BGO0FBQUEsSUFFQSxhQUFhLGVBQWdCLFNBQVMsT0FBTyxDQUFDLEdBQUc7QUFDN0MsV0FBSyxZQUFZO0FBQ2pCLFdBQUssVUFBVSxDQUFDO0FBQ2hCLGlDQUEyQixTQUFTLElBQUksRUFDbkMsS0FBSyxDQUFDLFlBQVk7QUFDZixhQUFLLFVBQVU7QUFBQSxNQUNuQixDQUFDLEVBQ0EsUUFBUSxNQUFNLEtBQUssWUFBWSxLQUFLO0FBQUEsSUFDN0M7QUFBQSxJQUVBLFVBQVUsZUFBZ0IsT0FBTyxlQUFlLE1BQU07QUFDbEQsV0FBSyxVQUFVLE1BQU07QUFDakIsY0FBTSxVQUFVLE1BQU07QUFDdEIsY0FBTSxVQUFVLE1BQU07QUFDdEIsY0FBTSxRQUFRLE1BQU07QUFDcEIsY0FBTSxRQUFRLE1BQU07QUFFcEIsY0FBTSxVQUFVLFVBQVUsS0FBSyxLQUFLLFFBQVEsT0FBTyxhQUM3QyxVQUFVLEtBQUssS0FBSyxRQUFRLE9BQU8sYUFDbkM7QUFDTixjQUFNLFVBQVUsVUFBVSxLQUFLLEtBQUssU0FBUyxPQUFPLGNBQzlDLFVBQVUsS0FBSyxLQUFLLFNBQVMsT0FBTyxjQUNwQztBQUVOLGFBQUssU0FBUyxJQUFJLFFBQVE7QUFDMUIsYUFBSyxTQUFTLElBQUksUUFBUTtBQUMxQixhQUFLLE9BQU87QUFFWixZQUFJLGNBQWM7QUFDZCxnQkFBTSxVQUFVLGFBQWEsYUFBYSxlQUFlO0FBRXpELG1CQUFTLGlCQUFpQiw0QkFBNEIsT0FBTyxJQUFJLEVBQUU7QUFBQSxZQUMvRCxRQUFNLEdBQUcsVUFBVSxJQUFJLHNCQUFzQjtBQUFBLFVBQ2pEO0FBQUEsUUFDSjtBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0w7QUFBQSxJQUVBLFdBQVcsV0FBWTtBQUNuQixXQUFLLE9BQU87QUFFWixlQUFTLGlCQUFpQixnQ0FBZ0MsRUFBRTtBQUFBLFFBQ3hELFdBQVMsTUFBTSxVQUFVLE9BQU8sc0JBQXNCO0FBQUEsTUFDMUQ7QUFDQSxVQUFJLEtBQUssaUJBQWlCO0FBQ3RCLGFBQUssZ0JBQWdCO0FBQUEsTUFDekI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
