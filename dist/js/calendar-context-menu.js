// resources/js/calendar-context-menu.js
function calendarContextMenu({
  getActionsUsing
}) {
  return {
    open: false,
    size: {
      width: 0,
      height: 0
    },
    position: {
      x: 0,
      y: 0
    },
    mountData: {},
    context: null,
    actions: [],
    isLoading: false,
    menu: {
      ["x-show"]() {
        return this.open;
      },
      ["x-bind:style"]() {
        return `
                position: absolute;
                z-index: 40;
                top: ${this.position.y}px;
                left: ${this.position.x}px;
                `;
      },
      ["x-on:click.away"]() {
        this.closeMenu();
      }
    },
    init: async function() {
      const menu = this.$el.querySelector('[x-bind="menu"]');
      this.size = {
        width: menu.offsetWidth,
        height: menu.offsetHeight
      };
      this.$el.addEventListener("calendar--open-menu", (event) => this.openMenu(event));
    },
    loadActions: async function(context, data = {}) {
      this.isLoading = true;
      getActionsUsing(context, data).then((actions) => {
        this.actions = actions;
      }).finally(() => this.isLoading = false);
    },
    openMenu: async function(event) {
      this.$nextTick(() => {
        const clientX = event.clientX;
        const clientY = event.clientY;
        const pageX = event.pageX;
        const pageY = event.pageY;
        const offsetX = clientX + this.size.width > window.innerWidth ? clientX + this.size.width - window.innerWidth : 0;
        const offsetY = clientY + this.size.height > window.innerHeight ? clientY + this.size.height - window.innerHeight : 0;
        this.position.x = pageX - offsetX;
        this.position.y = pageY - offsetY;
        this.open = true;
      });
    },
    closeMenu: function() {
      this.open = false;
      this.actions = [];
    }
  };
}
export {
  calendarContextMenu as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NhbGVuZGFyLWNvbnRleHQtbWVudS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FsZW5kYXJDb250ZXh0TWVudSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRBY3Rpb25zVXNpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICByZXR1cm4ge1xuXG4gICAgICAgIG9wZW46IGZhbHNlLFxuXG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB9LFxuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDAsXG4gICAgICAgIH0sXG4gICAgICAgIG1vdW50RGF0YToge30sXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIGFjdGlvbnM6IFtdLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuXG4gICAgICAgIG1lbnU6IHtcbiAgICAgICAgICAgIFsneC1zaG93J10oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3BlblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFsneC1iaW5kOnN0eWxlJ10oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgei1pbmRleDogNDA7XG4gICAgICAgICAgICAgICAgdG9wOiAke3RoaXMucG9zaXRpb24ueX1weDtcbiAgICAgICAgICAgICAgICBsZWZ0OiAke3RoaXMucG9zaXRpb24ueH1weDtcbiAgICAgICAgICAgICAgICBgO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFsneC1vbjpjbGljay5hd2F5J10oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZU1lbnUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpbml0OiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBtZW51ID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvcignW3gtYmluZD1cIm1lbnVcIl0nKTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogbWVudS5vZmZzZXRXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IG1lbnUub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy4kZWwuYWRkRXZlbnRMaXN0ZW5lcignY2FsZW5kYXItLW9wZW4tbWVudScsIChldmVudCkgPT4gdGhpcy5vcGVuTWVudShldmVudCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvYWRBY3Rpb25zOiBhc3luYyBmdW5jdGlvbihjb250ZXh0LCBkYXRhID0ge30pIHtcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZVxuICAgICAgICAgICAgZ2V0QWN0aW9uc1VzaW5nKGNvbnRleHQsIGRhdGEpXG4gICAgICAgICAgICAgICAgLnRoZW4oKGFjdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4gdGhpcy5pc0xvYWRpbmcgPSBmYWxzZSlcbiAgICAgICAgfSxcblxuICAgICAgICBvcGVuTWVudTogYXN5bmMgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyB0aGlzLmNvbnRleHQgPSBldmVudC5kZXRhaWwuY29udGV4dDtcbiAgICAgICAgICAgIC8vIHRoaXMubW91bnREYXRhID0gZXZlbnQuZGV0YWlsLm1vdW50RGF0YTtcbiAgICAgICAgICAgIC8vIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZVxuICAgICAgICAgICAgLy8gZ2V0QWN0aW9uc1VzaW5nKGV2ZW50LmRldGFpbClcbiAgICAgICAgICAgIC8vICAgICAudGhlbigoYWN0aW9ucykgPT4ge1xuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zXG4gICAgICAgICAgICAvLyAgICAgfSlcbiAgICAgICAgICAgIC8vICAgICAuZmluYWxseSgoKSA9PiB0aGlzLmlzTG9hZGluZyA9IGZhbHNlKVxuXG4gICAgICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xpZW50WCA9IGV2ZW50LmNsaWVudFg7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xpZW50WSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZVggPSBldmVudC5wYWdlWDtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlWSA9IGV2ZW50LnBhZ2VZO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IGNsaWVudFggKyB0aGlzLnNpemUud2lkdGggPiB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICA/IGNsaWVudFggKyB0aGlzLnNpemUud2lkdGggLSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IGNsaWVudFkgKyB0aGlzLnNpemUuaGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgID8gY2xpZW50WSArIHRoaXMuc2l6ZS5oZWlnaHQgLSB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi54ID0gcGFnZVggLSBvZmZzZXRYO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24ueSA9IHBhZ2VZIC0gb2Zmc2V0WTtcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xvc2VNZW51OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IFtdO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFlLFNBQVIsb0JBQXFDO0FBQUEsRUFDSTtBQUNKLEdBQUc7QUFDM0MsU0FBTztBQUFBLElBRUgsTUFBTTtBQUFBLElBRU4sTUFBTTtBQUFBLE1BQ0YsT0FBTztBQUFBLE1BQ1AsUUFBUTtBQUFBLElBQ1o7QUFBQSxJQUNBLFVBQVU7QUFBQSxNQUNOLEdBQUc7QUFBQSxNQUNILEdBQUc7QUFBQSxJQUNQO0FBQUEsSUFDQSxXQUFXLENBQUM7QUFBQSxJQUNaLFNBQVM7QUFBQSxJQUNULFNBQVMsQ0FBQztBQUFBLElBQ1YsV0FBVztBQUFBLElBRVgsTUFBTTtBQUFBLE1BQ0YsQ0FBQyxRQUFRLElBQUk7QUFDVCxlQUFPLEtBQUs7QUFBQSxNQUNoQjtBQUFBLE1BQ0EsQ0FBQyxjQUFjLElBQUk7QUFDZixlQUFPO0FBQUE7QUFBQTtBQUFBLHVCQUdBLEtBQUssU0FBUyxDQUFDO0FBQUEsd0JBQ2QsS0FBSyxTQUFTLENBQUM7QUFBQTtBQUFBLE1BRTNCO0FBQUEsTUFDQSxDQUFDLGlCQUFpQixJQUFJO0FBQ2xCLGFBQUssVUFBVTtBQUFBLE1BQ25CO0FBQUEsSUFDSjtBQUFBLElBRUEsTUFBTSxpQkFBa0I7QUFDcEIsWUFBTSxPQUFPLEtBQUssSUFBSSxjQUFjLGlCQUFpQjtBQUNyRCxXQUFLLE9BQU87QUFBQSxRQUNSLE9BQU8sS0FBSztBQUFBLFFBQ1osUUFBUSxLQUFLO0FBQUEsTUFDakI7QUFFQSxXQUFLLElBQUksaUJBQWlCLHVCQUF1QixDQUFDLFVBQVUsS0FBSyxTQUFTLEtBQUssQ0FBQztBQUFBLElBQ3BGO0FBQUEsSUFFQSxhQUFhLGVBQWUsU0FBUyxPQUFPLENBQUMsR0FBRztBQUM1QyxXQUFLLFlBQVk7QUFDakIsc0JBQWdCLFNBQVMsSUFBSSxFQUN4QixLQUFLLENBQUMsWUFBWTtBQUNmLGFBQUssVUFBVTtBQUFBLE1BQ25CLENBQUMsRUFDQSxRQUFRLE1BQU0sS0FBSyxZQUFZLEtBQUs7QUFBQSxJQUM3QztBQUFBLElBRUEsVUFBVSxlQUFnQixPQUFPO0FBVTdCLFdBQUssVUFBVSxNQUFNO0FBQ2pCLGNBQU0sVUFBVSxNQUFNO0FBQ3RCLGNBQU0sVUFBVSxNQUFNO0FBQ3RCLGNBQU0sUUFBUSxNQUFNO0FBQ3BCLGNBQU0sUUFBUSxNQUFNO0FBRXBCLGNBQU0sVUFBVSxVQUFVLEtBQUssS0FBSyxRQUFRLE9BQU8sYUFDN0MsVUFBVSxLQUFLLEtBQUssUUFBUSxPQUFPLGFBQ25DO0FBQ04sY0FBTSxVQUFVLFVBQVUsS0FBSyxLQUFLLFNBQVMsT0FBTyxjQUM5QyxVQUFVLEtBQUssS0FBSyxTQUFTLE9BQU8sY0FDcEM7QUFFTixhQUFLLFNBQVMsSUFBSSxRQUFRO0FBQzFCLGFBQUssU0FBUyxJQUFJLFFBQVE7QUFDMUIsYUFBSyxPQUFPO0FBQUEsTUFDaEIsQ0FBQztBQUFBLElBQ0w7QUFBQSxJQUVBLFdBQVcsV0FBWTtBQUNuQixXQUFLLE9BQU87QUFDWixXQUFLLFVBQVUsQ0FBQztBQUFBLElBQ3BCO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
