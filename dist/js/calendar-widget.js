var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// node_modules/svelte/src/runtime/internal/globals.js
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);

// node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
var ResizeObserverSingleton = class _ResizeObserverSingleton {
  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    __publicField(this, "_listeners", "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0);
    /**
     * @private
     * @type {ResizeObserver}
     */
    __publicField(this, "_observer");
    /** @type {ResizeObserverOptions} */
    __publicField(this, "options");
    this.options = options;
  }
  /**
   * @param {Element} element
   * @param {import('./private.js').Listener} listener
   * @returns {() => void}
   */
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  /**
   * @private
   */
  _getObserver() {
    return this._observer ?? (this._observer = new ResizeObserver((entries) => {
      for (const entry of entries) {
        _ResizeObserverSingleton.entries.set(entry.target, entry);
        this._listeners.get(entry.target)?.(entry);
      }
    }));
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

// node_modules/svelte/src/runtime/internal/dom.js
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function element(name) {
  return document.createElement(name);
}
function attr(node, attribute, value) {
  if (value == null) node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result[node.slot || "default"] = true;
    }
  );
  return result;
}

// node_modules/svelte/src/shared/boolean_attributes.js
var _boolean_attributes = (
  /** @type {const} */
  [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ]
);
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

// node_modules/svelte/src/runtime/internal/Component.js
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      /** The Svelte component constructor */
      __publicField(this, "$$ctor");
      /** Slots */
      __publicField(this, "$$s");
      /** The Svelte component instance */
      __publicField(this, "$$c");
      /** Whether or not the custom element is connected */
      __publicField(this, "$$cn", false);
      /** Component props data */
      __publicField(this, "$$d", {});
      /** `true` if currently in the process of reflecting component props back to attributes */
      __publicField(this, "$$r", false);
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      __publicField(this, "$$p_d", {});
      /** @type {Record<string, Function[]>} Event listeners */
      __publicField(this, "$$l", {});
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        let create_slot = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = element("slot");
                if (name !== "default") {
                  attr(node, "name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$cn || this.$$c) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
          }
        }
        for (const key in this.$$p_d) {
          if (!(key in this.$$d) && this[key] !== void 0) {
            this.$$d[key] = this[key];
            delete this[key];
          }
        }
        this.$$c = new this.$$ctor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        const reflect_attributes = () => {
          this.$$r = true;
          for (const key in this.$$p_d) {
            this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
            if (this.$$p_d[key].reflect) {
              const attribute_value = get_custom_element_value(
                key,
                this.$$d[key],
                this.$$p_d,
                "toAttribute"
              );
              if (attribute_value == null) {
                this.removeAttribute(this.$$p_d[key].attribute || key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
          }
          this.$$r = false;
        };
        this.$$c.$$.after_update.push(reflect_attributes);
        reflect_attributes();
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr2, _oldValue, newValue) {
      if (this.$$r) return;
      attr2 = this.$$g_p(attr2);
      this.$$d[attr2] = get_custom_element_value(attr2, newValue, this.$$p_d, "toProp");
      this.$$c?.$set({ [attr2]: this.$$d[attr2] });
    }
    disconnectedCallback() {
      this.$$cn = false;
      Promise.resolve().then(() => {
        if (!this.$$cn && this.$$c) {
          this.$$c.$destroy();
          this.$$c = void 0;
        }
      });
    }
    $$g_p(attribute_name) {
      return Object.keys(this.$$p_d).find(
        (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop, value, props_definition, transform) {
  const type = props_definition[prop]?.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}

// node_modules/@event-calendar/core/index.js
function symbol() {
  return Symbol("ec");
}
var payloadProp = symbol();

// resources/js/calendar-widget.js
function calendarWidget({
  view = "dayGridMonth",
  locale = "en",
  firstDay = 1,
  events = [],
  eventContent = null,
  resourceLabelContent = null,
  selectable = false,
  eventClickEnabled = false,
  eventDragEnabled = false,
  eventResizeEnabled = false,
  noEventsClickEnabled = false,
  dateClickEnabled = false,
  dateSelectEnabled = false,
  datesSetEnabled = false,
  viewDidMountEnabled = false,
  eventAllUpdatedEnabled = false,
  dayMaxEvents = false,
  moreLinkContent = null,
  resources = [],
  hasDateClickContextMenu = false,
  hasDateSelectContextMenu = false,
  hasEventClickContextMenu = false,
  hasNoEventsClickContextMenu = false,
  options = {},
  dayHeaderFormat = null,
  slotLabelFormat = null,
  eventAssetUrl
}) {
  return {
    calendarEl: null,
    init: async function() {
      this.calendarEl = this.$el;
      let self = this;
      let settings = {
        view,
        resources,
        eventSources: [
          {
            events: (fetchInfo, successCallback, failureCallback) => {
              return this.$wire.getEventsJs(fetchInfo);
            }
          }
        ],
        locale,
        firstDay,
        dayMaxEvents,
        selectable: dateSelectEnabled,
        eventStartEditable: eventDragEnabled,
        eventDurationEditable: eventResizeEnabled
      };
      if (dayHeaderFormat) {
        settings.dayHeaderFormat = dayHeaderFormat;
      }
      if (slotLabelFormat) {
        settings.slotLabelFormat = slotLabelFormat;
      }
      if (dateClickEnabled) {
        settings.dateClick = (info) => {
          if (hasDateClickContextMenu) {
            const element2 = document.querySelector("[calendar-context-menu]");
            const menu = Alpine.$data(element2);
            menu.loadActions("dateClick", {
              date: info.date,
              dateStr: info.dateStr,
              allDay: info.allDay,
              view: info.view,
              resource: info.resource
            });
            menu.openMenu(info.jsEvent);
            return;
            self.$el.querySelector("[calendar-context-menu]").dispatchEvent(new CustomEvent("calendar--open-menu", {
              detail: {
                mountData: {
                  date: info.date,
                  dateStr: info.dateStr,
                  allDay: info.allDay,
                  view: info.view,
                  resource: info.resource
                },
                jsEvent: info.jsEvent,
                dayEl: info.dayEl,
                context: "dateClick"
              }
            }));
          } else {
            this.$wire.onDateClick({
              date: info.date,
              dateStr: info.dateStr,
              allDay: info.allDay,
              view: info.view,
              resource: info.resource
            });
          }
        };
      }
      if (dateSelectEnabled) {
        settings.select = (info) => {
          if (hasDateSelectContextMenu) {
            self.$el.querySelector("[calendar-context-menu]").dispatchEvent(new CustomEvent("calendar--open-menu", {
              detail: {
                mountData: {
                  start: info.start,
                  startStr: info.startStr,
                  end: info.end,
                  endStr: info.endStr,
                  allDay: info.allDay,
                  view: info.view,
                  resource: info.resource
                },
                jsEvent: info.jsEvent,
                context: "dateSelect"
              }
            }));
          } else {
            this.$wire.onDateSelect({
              start: info.start,
              startStr: info.startStr,
              end: info.end,
              endStr: info.endStr,
              allDay: info.allDay,
              view: info.view,
              resource: info.resource
            });
          }
        };
      }
      if (datesSetEnabled) {
        settings.datesSet = (info) => {
          this.$wire.onDatesSet({
            start: info.start,
            startStr: info.startStr,
            end: info.end,
            endStr: info.endStr,
            view: info.view
          });
        };
      }
      if (eventContent !== null) {
        settings.eventContent = (info) => {
          const content = self.getEventContent(info);
          if (content === void 0) {
            return void 0;
          }
          return {
            html: content
          };
        };
      }
      if (moreLinkContent !== null) {
        settings.moreLinkContent = (arg) => {
          return {
            html: self.getMoreLinkContent(arg)
          };
        };
      }
      if (resourceLabelContent !== null) {
        settings.resourceLabelContent = (info) => {
          const content = self.getResourceLabelContent(info);
          if (content === void 0) {
            return void 0;
          }
          return {
            html: content
          };
        };
      }
      if (eventClickEnabled) {
        settings.eventClick = (info) => {
          const component = Alpine.$data(info.el);
          component.onClick(info);
        };
      }
      if (noEventsClickEnabled) {
        settings.noEventsClick = (info) => {
          if (hasNoEventsClickContextMenu) {
            self.$el.querySelector("[calendar-context-menu]").dispatchEvent(new CustomEvent("calendar--open-menu", {
              detail: {
                mountData: {
                  view: info.view
                },
                jsEvent: info.jsEvent,
                context: "noEventsClick"
              }
            }));
          } else {
            this.$wire.onNoEventsClick({
              view: info.view
            });
          }
        };
      }
      settings.eventResize = async (info) => {
        const durationEditable = info.event.durationEditable;
        let enabled = eventResizeEnabled;
        if (durationEditable !== void 0) {
          enabled = durationEditable;
        }
        if (enabled) {
          await this.$wire.onEventResize({
            event: info.event,
            oldEvent: info.oldEvent,
            endDelta: info.endDelta,
            view: info.view
          }).then((result) => {
            if (result === false) {
              info.revert();
            }
          });
        }
      };
      settings.eventDrop = async (info) => {
        const startEditable = info.event.startEditable;
        let enabled = eventDragEnabled;
        if (startEditable !== void 0) {
          enabled = startEditable;
        }
        if (enabled) {
          await this.$wire.onEventDrop({
            event: info.event,
            oldEvent: info.oldEvent,
            oldResource: info.oldResource,
            newResource: info.newResource,
            delta: info.delta,
            view: info.view
          }).then((result) => {
            if (result === false) {
              info.revert();
            }
          });
        }
      };
      if (viewDidMountEnabled) {
        settings.viewDidMount = (view2) => {
          this.$wire.onViewDidMount({
            view: view2
          });
        };
      }
      if (eventAllUpdatedEnabled) {
        settings.eventAllUpdated = (info) => {
          this.$wire.onEventAllUpdated({
            info
          });
        };
      }
      settings.eventDidMount = (info) => {
        info.el.setAttribute("x-load");
        info.el.setAttribute("x-load-src", eventAssetUrl);
        info.el.setAttribute("x-data", `event({
                    event: ${JSON.stringify(info.event)},
                    timeText: "${info.timeText}",
                    view: ${JSON.stringify(info.view)},
                    hasEventClickContextMenu: ${hasEventClickContextMenu},
                })`);
      };
      this.ec = EventCalendar.create(this.$el.querySelector("div"), {
        ...settings,
        ...options
      });
      window.addEventListener("calendar--refresh", () => {
        this.ec.refetchEvents();
      });
      this.$wire.on("calendar--set", (data) => {
        this.ec.setOption(data.key, data.value);
      });
    },
    getEventContent: function(info) {
      if (typeof eventContent === "string") {
        return this.wrapContent(eventContent, info);
      }
      if (typeof eventContent === "object") {
        const model = info.event.extendedProps.model;
        const content = eventContent[model];
        if (content === void 0) {
          return void 0;
        }
        return this.wrapContent(content, info);
      }
      return void 0;
    },
    getResourceLabelContent: function(info) {
      if (typeof resourceLabelContent === "string") {
        return this.wrapContent(resourceLabelContent, info);
      }
      if (typeof resourceLabelContent === "object") {
        const model = info.event.extendedProps.model;
        const content = resourceLabelContent[model];
        if (content === void 0) {
          return void 0;
        }
        return this.wrapContent(content, info);
      }
      return void 0;
    },
    getMoreLinkContent: function(info) {
      return this.wrapContent(moreLinkContent, info);
    },
    wrapContent: function(content, info) {
      let container = document.createElement("div");
      container.innerHTML = content;
      container.setAttribute("x-data", JSON.stringify(info));
      container.classList.add("w-full");
      return container.outerHTML;
    }
  };
}
export {
  calendarWidget as default
};
//# sourceMappingURL=data:application/json;base64,
