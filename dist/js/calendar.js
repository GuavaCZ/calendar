// resources/js/calendar.js
function calendar({
  eventClickEnabled = false,
  eventContent = null
}) {
  return {
    init: function() {
      this.mountCalendar();
    },
    mountCalendar: function() {
      let ec = EventCalendar.create(
        this.$el,
        // this.$el.querySelector('[data-calendar]'),
        this.getSettings()
      );
    },
    getSettings: function() {
      let settings = {
        view: "dayGridMonth",
        eventSources: [
          {
            events: (fetchInfo) => {
              return this.$wire.getEventsJs(fetchInfo);
            }
          }
        ]
      };
      if (eventContent !== null) {
        settings.eventContent = (info) => {
          const content = self.getEventContent(info);
          if (content === void 0) {
            return void 0;
          }
          return {
            html: content
          };
        };
      }
      if (eventClickEnabled) {
        settings.eventClick = (info) => {
          const component = Alpine.$data(info.el);
          component.onClick(info);
        };
      }
      return settings;
    },
    getEventContent: function(info) {
      if (typeof eventContent === "string") {
        return this.wrapContent(eventContent, info);
      }
      if (typeof eventContent === "object") {
        const model = info.event.extendedProps.model;
        const content = eventContent[model];
        if (content === void 0) {
          return void 0;
        }
        return this.wrapContent(content, info);
      }
      return void 0;
    },
    wrapContent: function(content, info) {
      let container = document.createElement("div");
      container.innerHTML = content;
      container.setAttribute("x-data", JSON.stringify(info));
      container.classList.add("w-full");
      return container.outerHTML;
    }
  };
}
export {
  calendar as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcmVzb3VyY2VzL2pzL2NhbGVuZGFyLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxlbmRhcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRDbGlja0VuYWJsZWQgPSBmYWxzZSxcbiAgICBldmVudENvbnRlbnQgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuKSB7XG4gICAgcmV0dXJuIHtcblxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLm1vdW50Q2FsZW5kYXIoKVxuICAgICAgICB9LFxuXG4gICAgICAgIG1vdW50Q2FsZW5kYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBlYyA9IEV2ZW50Q2FsZW5kYXIuY3JlYXRlKFxuICAgICAgICAgICAgICAgIHRoaXMuJGVsLFxuICAgICAgICAgICAgICAgIC8vIHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNhbGVuZGFyXScpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2V0dGluZ3MoKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTZXR0aW5nczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IHNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgIHZpZXc6ICdkYXlHcmlkTW9udGgnLFxuICAgICAgICAgICAgICAgIGV2ZW50U291cmNlczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHM6IChmZXRjaEluZm8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kd2lyZS5nZXRFdmVudHNKcyhmZXRjaEluZm8pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXZlbnRDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuZXZlbnRDb250ZW50ID0gKGluZm8pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHNlbGYuZ2V0RXZlbnRDb250ZW50KGluZm8pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChldmVudENsaWNrRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLmV2ZW50Q2xpY2sgPSAoaW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBBbHBpbmUuJGRhdGEoaW5mby5lbClcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lm9uQ2xpY2soaW5mbylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgKGV2ZW50Q2xpY2tFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gc2V0dGluZ3MuZXZlbnRDbGljayA9IChpbmZvKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGlmIChpbmZvLmV2ZW50LmV4dGVuZGVkUHJvcHMudXJsKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBjb25zdCB0YXJnZXQgPSBpbmZvLmV2ZW50LmV4dGVuZGVkUHJvcHMudXJsX3RhcmdldCA/PyAnX2JsYW5rJ1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgd2luZG93Lm9wZW4odGFyZ2V0LCAnX2JsYW5rJylcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgLy8gaWYgKGhhc0V2ZW50Q2xpY2tDb250ZXh0TWVudSkge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgLy8gdG9kb1xuICAgICAgICAgICAgICAgIC8vICAgICAvLyB9XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgdGhpcy4kd2lyZS5vbkV2ZW50Q2xpY2soe1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgZXZlbnQ6IGluZm8uZXZlbnQsXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB2aWV3OiBpbmZvLnZpZXcsXG4gICAgICAgICAgICAgICAgLy8gICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICByZXR1cm4gc2V0dGluZ3NcbiAgICAgICAgfSxcblxuXG4gICAgICAgIGdldEV2ZW50Q29udGVudDogZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnRDb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndyYXBDb250ZW50KGV2ZW50Q29udGVudCwgaW5mbylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudENvbnRlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWwgPSBpbmZvLmV2ZW50LmV4dGVuZGVkUHJvcHMubW9kZWxcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZXZlbnRDb250ZW50W21vZGVsXVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JhcENvbnRlbnQoY29udGVudCwgaW5mbylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9LFxuXG4gICAgICAgIHdyYXBDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCwgaW5mbykge1xuICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gY29udGVudFxuXG4gICAgICAgICAgICAvLyBBZGQgYWxwaW5lIGRhdGEgYW5kIGNsYXNzZXNcbiAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3gtZGF0YScsIEpTT04uc3RyaW5naWZ5KGluZm8pKVxuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3ctZnVsbCcpXG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgbW9kaWZpZWQgSFRNTFxuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5vdXRlckhUTUxcbiAgICAgICAgfSxcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixTQUEwQjtBQUFBLEVBQ0ksb0JBQW9CO0FBQUEsRUFDckQsZUFBZTtBQUNjLEdBQy9CO0FBQ0UsU0FBTztBQUFBLElBRUgsTUFBTSxXQUFZO0FBQ2QsV0FBSyxjQUFjO0FBQUEsSUFDdkI7QUFBQSxJQUVBLGVBQWUsV0FBWTtBQUN2QixVQUFJLEtBQUssY0FBYztBQUFBLFFBQ25CLEtBQUs7QUFBQTtBQUFBLFFBRUwsS0FBSyxZQUFZO0FBQUEsTUFDckI7QUFBQSxJQUNKO0FBQUEsSUFFQSxhQUFhLFdBQVk7QUFDckIsVUFBSSxXQUFXO0FBQUEsUUFDWCxNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsVUFDVjtBQUFBLFlBQ0ksUUFBUSxDQUFDLGNBQWM7QUFDbkIscUJBQU8sS0FBSyxNQUFNLFlBQVksU0FBUztBQUFBLFlBQzNDO0FBQUEsVUFDSjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBRUEsVUFBSSxpQkFBaUIsTUFBTTtBQUN2QixpQkFBUyxlQUFlLENBQUMsU0FBUztBQUM5QixnQkFBTSxVQUFVLEtBQUssZ0JBQWdCLElBQUk7QUFFekMsY0FBSSxZQUFZLFFBQVc7QUFDdkIsbUJBQU87QUFBQSxVQUNYO0FBRUEsaUJBQU87QUFBQSxZQUNILE1BQU07QUFBQSxVQUNWO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFFQSxVQUFJLG1CQUFtQjtBQUNuQixpQkFBUyxhQUFhLENBQUMsU0FBUztBQUM1QixnQkFBTSxZQUFZLE9BQU8sTUFBTSxLQUFLLEVBQUU7QUFDdEMsb0JBQVUsUUFBUSxJQUFJO0FBQUEsUUFDMUI7QUFBQSxNQUNKO0FBb0JBLGFBQU87QUFBQSxJQUNYO0FBQUEsSUFHQSxpQkFBaUIsU0FBVSxNQUFNO0FBQzdCLFVBQUksT0FBTyxpQkFBaUIsVUFBVTtBQUNsQyxlQUFPLEtBQUssWUFBWSxjQUFjLElBQUk7QUFBQSxNQUM5QztBQUVBLFVBQUksT0FBTyxpQkFBaUIsVUFBVTtBQUNsQyxjQUFNLFFBQVEsS0FBSyxNQUFNLGNBQWM7QUFDdkMsY0FBTSxVQUFVLGFBQWEsS0FBSztBQUVsQyxZQUFJLFlBQVksUUFBVztBQUN2QixpQkFBTztBQUFBLFFBQ1g7QUFFQSxlQUFPLEtBQUssWUFBWSxTQUFTLElBQUk7QUFBQSxNQUN6QztBQUVBLGFBQU87QUFBQSxJQUNYO0FBQUEsSUFFQSxhQUFhLFNBQVUsU0FBUyxNQUFNO0FBQ2xDLFVBQUksWUFBWSxTQUFTLGNBQWMsS0FBSztBQUM1QyxnQkFBVSxZQUFZO0FBR3RCLGdCQUFVLGFBQWEsVUFBVSxLQUFLLFVBQVUsSUFBSSxDQUFDO0FBQ3JELGdCQUFVLFVBQVUsSUFBSSxRQUFRO0FBR2hDLGFBQU8sVUFBVTtBQUFBLElBQ3JCO0FBQUEsRUFDSjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
